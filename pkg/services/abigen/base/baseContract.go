// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package base

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BaseMetaData contains all meta data concerning the Base contract.
var BaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllTokenOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260006006553480156200001657600080fd5b506040518060600160405280602981526020016200377a6029913962000042816200004960201b60201c565b50620003bf565b80600290816200005a9190620002d8565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000e057607f821691505b602082108103620000f657620000f562000098565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000121565b6200016c868362000121565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001b9620001b3620001ad8462000184565b6200018e565b62000184565b9050919050565b6000819050919050565b620001d58362000198565b620001ed620001e482620001c0565b8484546200012e565b825550505050565b600090565b62000204620001f5565b62000211818484620001ca565b505050565b5b8181101562000239576200022d600082620001fa565b60018101905062000217565b5050565b601f82111562000288576200025281620000fc565b6200025d8462000111565b810160208510156200026d578190505b620002856200027c8562000111565b83018262000216565b50505b505050565b600082821c905092915050565b6000620002ad600019846008026200028d565b1980831691505092915050565b6000620002c883836200029a565b9150826002028217905092915050565b620002e3826200005e565b67ffffffffffffffff811115620002ff57620002fe62000069565b5b6200030b8254620000c7565b620003188282856200023d565b600060209050601f8311600181146200035057600084156200033b578287015190505b620003478582620002ba565b865550620003b7565b601f1984166200036086620000fc565b60005b828110156200038a5784890151825560018201915060208501945060208101905062000363565b86831015620003aa5784890151620003a6601f8916826200029a565b8355505b6001600288020188555050505b505050505050565b6133ab80620003cf6000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c80634e1273f411610097578063d9d6165511610066578063d9d6165514610308578063e985e9c514610338578063efd3269214610368578063f242432a14610398576100ff565b80634e1273f41461025c5780637f1dd80b1461028c5780638b305930146102bc578063a22cb465146102ec576100ff565b80632eb2c2d6116100d35780632eb2c2d6146101b0578063310495ab146101cc5780633470edcf146101fc57806336a0b2f51461022c576100ff565b8062fdd58e1461010457806301ffc9a7146101345780630e89341c1461016457806310662e9114610194575b600080fd5b61011e60048036038101906101199190611c60565b6103b4565b60405161012b9190611caf565b60405180910390f35b61014e60048036038101906101499190611d22565b61047c565b60405161015b9190611d6a565b60405180910390f35b61017e60048036038101906101799190611d85565b61055e565b60405161018b9190611e42565b60405180910390f35b6101ae60048036038101906101a9919061203a565b6105f2565b005b6101ca60048036038101906101c5919061218d565b6107ba565b005b6101e660048036038101906101e19190611d85565b61085b565b6040516101f39190611e42565b60405180910390f35b61021660048036038101906102119190611d85565b6108fb565b604051610223919061231a565b60405180910390f35b61024660048036038101906102419190611d85565b61099c565b604051610253919061231a565b60405180910390f35b610276600480360381019061027191906123ff565b610a3d565b6040516102839190612535565b60405180910390f35b6102a660048036038101906102a19190611d85565b610b56565b6040516102b39190612566565b60405180910390f35b6102d660048036038101906102d19190611d85565b610bde565b6040516102e39190612566565b60405180910390f35b610306600480360381019061030191906125ad565b610c11565b005b610322600480360381019061031d91906125ed565b610c27565b60405161032f9190612535565b60405180910390f35b610352600480360381019061034d919061261a565b610cbe565b60405161035f9190611d6a565b60405180910390f35b610382600480360381019061037d9190611d85565b610d52565b60405161038f9190611caf565b60405180910390f35b6103b260048036038101906103ad919061265a565b610d72565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041b90612763565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061054757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610557575061055682610e13565b5b9050919050565b60606002805461056d906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610599906127b2565b80156105e65780601f106105bb576101008083540402835291602001916105e6565b820191906000526020600020905b8154815290600101906020018083116105c957829003601f168201915b50505050509050919050565b60006006600081548092919061060790612812565b91905055905061061933828585610e7d565b836005600083815260200190815260200160002090816106399190612a06565b5060036000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040516107ac9190611caf565b60405180910390a250505050565b6107c261102d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061080857506108078561080261102d565b610cbe565b5b610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e90612b4a565b60405180910390fd5b6108548585858585611035565b5050505050565b6005602052806000526040600020600091509050805461087a906127b2565b80601f01602080910402602001604051908101604052809291908181526020018280546108a6906127b2565b80156108f35780601f106108c8576101008083540402835291602001916108f3565b820191906000526020600020905b8154815290600101906020018083116108d657829003601f168201915b505050505081565b60606003600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561099057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610946575b50505050509050919050565b606060036000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610a3157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109e7575b50505050509050919050565b60608151835114610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a90612bdc565b60405180910390fd5b6000835167ffffffffffffffff811115610aa057610a9f611e6e565b5b604051908082528060200260200182016040528015610ace5781602001602082028036833780820191505090505b50905060005b8451811015610b4b57610b1b858281518110610af357610af2612bfc565b5b6020026020010151858381518110610b0e57610b0d612bfc565b5b60200260200101516103b4565b828281518110610b2e57610b2d612bfc565b5b60200260200101818152505080610b4490612812565b9050610ad4565b508091505092915050565b600080610b628361099c565b9050600081511115610b9e578060018251610b7d9190612c2b565b81518110610b8e57610b8d612bfc565b5b6020026020010151915050610bd9565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612cab565b60405180910390fd5b919050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c23610c1c61102d565b8383611356565b5050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cb257602002820191906000526020600020905b815481526020019060010190808311610c9e575b50505050509050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600060036000838152602001908152602001600020805490509050919050565b610d7a61102d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610dc05750610dbf85610dba61102d565b610cbe565b5b610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690612b4a565b60405180910390fd5b610e0c85858585856114c2565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390612d3d565b60405180910390fd5b6000610ef661102d565b90506000610f038561175d565b90506000610f108561175d565b9050610f21836000898585896117d7565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f809190612d5d565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051610ffe929190612d91565b60405180910390a4611015836000898585896117df565b611024836000898989896117e7565b50505050505050565b600033905090565b8151835114611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107090612e2c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110df90612ebe565b60405180910390fd5b60006110f261102d565b90506111028187878787876117d7565b60005b84518110156112b357600085828151811061112357611122612bfc565b5b60200260200101519050600085838151811061114257611141612bfc565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111da90612f50565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112989190612d5d565b92505081905550505050806112ac90612812565b9050611105565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161132a929190612f70565b60405180910390a46113408187878787876117df565b61134e8187878787876119be565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613019565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114b59190611d6a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152890612ebe565b60405180910390fd5b600061153b61102d565b905060006115488561175d565b905060006115558561175d565b90506115658389898585896117d7565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390612f50565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116b19190612d5d565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161172e929190612d91565b60405180910390a4611744848a8a86868a6117df565b611752848a8a8a8a8a6117e7565b505050505050505050565b60606000600167ffffffffffffffff81111561177c5761177b611e6e565b5b6040519080825280602002602001820160405280156117aa5781602001602082028036833780820191505090505b50905082816000815181106117c2576117c1612bfc565b5b60200260200101818152505080915050919050565b505050505050565b505050505050565b6118068473ffffffffffffffffffffffffffffffffffffffff16611b95565b156119b6578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161184c95949392919061308e565b6020604051808303816000875af192505050801561188857506040513d601f19601f8201168201806040525081019061188591906130fd565b60015b61192d57611894613137565b806308c379a0036118f057506118a8613159565b806118b357506118f2565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e79190611e42565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119249061325b565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab906132ed565b60405180910390fd5b505b505050505050565b6119dd8473ffffffffffffffffffffffffffffffffffffffff16611b95565b15611b8d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611a2395949392919061330d565b6020604051808303816000875af1925050508015611a5f57506040513d601f19601f82011682018060405250810190611a5c91906130fd565b60015b611b0457611a6b613137565b806308c379a003611ac75750611a7f613159565b80611a8a5750611ac9565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe9190611e42565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb9061325b565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b82906132ed565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611bf782611bcc565b9050919050565b611c0781611bec565b8114611c1257600080fd5b50565b600081359050611c2481611bfe565b92915050565b6000819050919050565b611c3d81611c2a565b8114611c4857600080fd5b50565b600081359050611c5a81611c34565b92915050565b60008060408385031215611c7757611c76611bc2565b5b6000611c8585828601611c15565b9250506020611c9685828601611c4b565b9150509250929050565b611ca981611c2a565b82525050565b6000602082019050611cc46000830184611ca0565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611cff81611cca565b8114611d0a57600080fd5b50565b600081359050611d1c81611cf6565b92915050565b600060208284031215611d3857611d37611bc2565b5b6000611d4684828501611d0d565b91505092915050565b60008115159050919050565b611d6481611d4f565b82525050565b6000602082019050611d7f6000830184611d5b565b92915050565b600060208284031215611d9b57611d9a611bc2565b5b6000611da984828501611c4b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611dec578082015181840152602081019050611dd1565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e1482611db2565b611e1e8185611dbd565b9350611e2e818560208601611dce565b611e3781611df8565b840191505092915050565b60006020820190508181036000830152611e5c8184611e09565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ea682611df8565b810181811067ffffffffffffffff82111715611ec557611ec4611e6e565b5b80604052505050565b6000611ed8611bb8565b9050611ee48282611e9d565b919050565b600067ffffffffffffffff821115611f0457611f03611e6e565b5b611f0d82611df8565b9050602081019050919050565b82818337600083830152505050565b6000611f3c611f3784611ee9565b611ece565b905082815260208101848484011115611f5857611f57611e69565b5b611f63848285611f1a565b509392505050565b600082601f830112611f8057611f7f611e64565b5b8135611f90848260208601611f29565b91505092915050565b600067ffffffffffffffff821115611fb457611fb3611e6e565b5b611fbd82611df8565b9050602081019050919050565b6000611fdd611fd884611f99565b611ece565b905082815260208101848484011115611ff957611ff8611e69565b5b612004848285611f1a565b509392505050565b600082601f83011261202157612020611e64565b5b8135612031848260208601611fca565b91505092915050565b60008060006060848603121561205357612052611bc2565b5b600084013567ffffffffffffffff81111561207157612070611bc7565b5b61207d86828701611f6b565b935050602061208e86828701611c4b565b925050604084013567ffffffffffffffff8111156120af576120ae611bc7565b5b6120bb8682870161200c565b9150509250925092565b600067ffffffffffffffff8211156120e0576120df611e6e565b5b602082029050602081019050919050565b600080fd5b6000612109612104846120c5565b611ece565b9050808382526020820190506020840283018581111561212c5761212b6120f1565b5b835b8181101561215557806121418882611c4b565b84526020840193505060208101905061212e565b5050509392505050565b600082601f83011261217457612173611e64565b5b81356121848482602086016120f6565b91505092915050565b600080600080600060a086880312156121a9576121a8611bc2565b5b60006121b788828901611c15565b95505060206121c888828901611c15565b945050604086013567ffffffffffffffff8111156121e9576121e8611bc7565b5b6121f58882890161215f565b935050606086013567ffffffffffffffff81111561221657612215611bc7565b5b6122228882890161215f565b925050608086013567ffffffffffffffff81111561224357612242611bc7565b5b61224f8882890161200c565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61229181611bec565b82525050565b60006122a38383612288565b60208301905092915050565b6000602082019050919050565b60006122c78261225c565b6122d18185612267565b93506122dc83612278565b8060005b8381101561230d5781516122f48882612297565b97506122ff836122af565b9250506001810190506122e0565b5085935050505092915050565b6000602082019050818103600083015261233481846122bc565b905092915050565b600067ffffffffffffffff82111561235757612356611e6e565b5b602082029050602081019050919050565b600061237b6123768461233c565b611ece565b9050808382526020820190506020840283018581111561239e5761239d6120f1565b5b835b818110156123c757806123b38882611c15565b8452602084019350506020810190506123a0565b5050509392505050565b600082601f8301126123e6576123e5611e64565b5b81356123f6848260208601612368565b91505092915050565b6000806040838503121561241657612415611bc2565b5b600083013567ffffffffffffffff81111561243457612433611bc7565b5b612440858286016123d1565b925050602083013567ffffffffffffffff81111561246157612460611bc7565b5b61246d8582860161215f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6124ac81611c2a565b82525050565b60006124be83836124a3565b60208301905092915050565b6000602082019050919050565b60006124e282612477565b6124ec8185612482565b93506124f783612493565b8060005b8381101561252857815161250f88826124b2565b975061251a836124ca565b9250506001810190506124fb565b5085935050505092915050565b6000602082019050818103600083015261254f81846124d7565b905092915050565b61256081611bec565b82525050565b600060208201905061257b6000830184612557565b92915050565b61258a81611d4f565b811461259557600080fd5b50565b6000813590506125a781612581565b92915050565b600080604083850312156125c4576125c3611bc2565b5b60006125d285828601611c15565b92505060206125e385828601612598565b9150509250929050565b60006020828403121561260357612602611bc2565b5b600061261184828501611c15565b91505092915050565b6000806040838503121561263157612630611bc2565b5b600061263f85828601611c15565b925050602061265085828601611c15565b9150509250929050565b600080600080600060a0868803121561267657612675611bc2565b5b600061268488828901611c15565b955050602061269588828901611c15565b94505060406126a688828901611c4b565b93505060606126b788828901611c4b565b925050608086013567ffffffffffffffff8111156126d8576126d7611bc7565b5b6126e48882890161200c565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061274d602a83611dbd565b9150612758826126f1565b604082019050919050565b6000602082019050818103600083015261277c81612740565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127ca57607f821691505b6020821081036127dd576127dc612783565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281d82611c2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361284f5761284e6127e3565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261287f565b6128c6868361287f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129036128fe6128f984611c2a565b6128de565b611c2a565b9050919050565b6000819050919050565b61291d836128e8565b6129316129298261290a565b84845461288c565b825550505050565b600090565b612946612939565b612951818484612914565b505050565b5b818110156129755761296a60008261293e565b600181019050612957565b5050565b601f8211156129ba5761298b8161285a565b6129948461286f565b810160208510156129a3578190505b6129b76129af8561286f565b830182612956565b50505b505050565b600082821c905092915050565b60006129dd600019846008026129bf565b1980831691505092915050565b60006129f683836129cc565b9150826002028217905092915050565b612a0f82611db2565b67ffffffffffffffff811115612a2857612a27611e6e565b5b612a3282546127b2565b612a3d828285612979565b600060209050601f831160018114612a705760008415612a5e578287015190505b612a6885826129ea565b865550612ad0565b601f198416612a7e8661285a565b60005b82811015612aa657848901518255600182019150602085019450602081019050612a81565b86831015612ac35784890151612abf601f8916826129cc565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612b34602e83611dbd565b9150612b3f82612ad8565b604082019050919050565b60006020820190508181036000830152612b6381612b27565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612bc6602983611dbd565b9150612bd182612b6a565b604082019050919050565b60006020820190508181036000830152612bf581612bb9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612c3682611c2a565b9150612c4183611c2a565b9250828203905081811115612c5957612c586127e3565b5b92915050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b6000612c95601483611dbd565b9150612ca082612c5f565b602082019050919050565b60006020820190508181036000830152612cc481612c88565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d27602183611dbd565b9150612d3282612ccb565b604082019050919050565b60006020820190508181036000830152612d5681612d1a565b9050919050565b6000612d6882611c2a565b9150612d7383611c2a565b9250828201905080821115612d8b57612d8a6127e3565b5b92915050565b6000604082019050612da66000830185611ca0565b612db36020830184611ca0565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612e16602883611dbd565b9150612e2182612dba565b604082019050919050565b60006020820190508181036000830152612e4581612e09565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ea8602583611dbd565b9150612eb382612e4c565b604082019050919050565b60006020820190508181036000830152612ed781612e9b565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612f3a602a83611dbd565b9150612f4582612ede565b604082019050919050565b60006020820190508181036000830152612f6981612f2d565b9050919050565b60006040820190508181036000830152612f8a81856124d7565b90508181036020830152612f9e81846124d7565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613003602983611dbd565b915061300e82612fa7565b604082019050919050565b6000602082019050818103600083015261303281612ff6565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061306082613039565b61306a8185613044565b935061307a818560208601611dce565b61308381611df8565b840191505092915050565b600060a0820190506130a36000830188612557565b6130b06020830187612557565b6130bd6040830186611ca0565b6130ca6060830185611ca0565b81810360808301526130dc8184613055565b90509695505050505050565b6000815190506130f781611cf6565b92915050565b60006020828403121561311357613112611bc2565b5b6000613121848285016130e8565b91505092915050565b60008160e01c9050919050565b600060033d11156131565760046000803e61315360005161312a565b90505b90565b600060443d106131e65761316b611bb8565b60043d036004823e80513d602482011167ffffffffffffffff821117156131935750506131e6565b808201805167ffffffffffffffff8111156131b157505050506131e6565b80602083010160043d0385018111156131ce5750505050506131e6565b6131dd82602001850186611e9d565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613245603483611dbd565b9150613250826131e9565b604082019050919050565b6000602082019050818103600083015261327481613238565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006132d7602883611dbd565b91506132e28261327b565b604082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b600060a0820190506133226000830188612557565b61332f6020830187612557565b818103604083015261334181866124d7565b9050818103606083015261335581856124d7565b905081810360808301526133698184613055565b9050969550505050505056fea26469706673582212202062cbd07c0af11e8f41e6cef0415f4f3b43c7fa591acd1f7ea9ec86820d504864736f6c6343000812003368747470733a2f2f6d757369636861696e2e636f6d2f6170692f746f6b656e2f7b69647d2e6a736f6e",
}

// BaseABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseMetaData.ABI instead.
var BaseABI = BaseMetaData.ABI

// BaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseMetaData.Bin instead.
var BaseBin = BaseMetaData.Bin

// DeployBase deploys a new Ethereum contract, binding an instance of Base to it.
func DeployBase(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Base, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// Base is an auto generated Go binding around an Ethereum contract.
type Base struct {
	BaseCaller     // Read-only binding to the contract
	BaseTransactor // Write-only binding to the contract
	BaseFilterer   // Log filterer for contract events
}

// BaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseSession struct {
	Contract     *Base             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseCallerSession struct {
	Contract *BaseCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTransactorSession struct {
	Contract     *BaseTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseRaw struct {
	Contract *Base // Generic contract binding to access the raw methods on
}

// BaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseCallerRaw struct {
	Contract *BaseCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTransactorRaw struct {
	Contract *BaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBase creates a new instance of Base, bound to a specific deployed contract.
func NewBase(address common.Address, backend bind.ContractBackend) (*Base, error) {
	contract, err := bindBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// NewBaseCaller creates a new read-only instance of Base, bound to a specific deployed contract.
func NewBaseCaller(address common.Address, caller bind.ContractCaller) (*BaseCaller, error) {
	contract, err := bindBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseCaller{contract: contract}, nil
}

// NewBaseTransactor creates a new write-only instance of Base, bound to a specific deployed contract.
func NewBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTransactor, error) {
	contract, err := bindBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTransactor{contract: contract}, nil
}

// NewBaseFilterer creates a new log filterer instance of Base, bound to a specific deployed contract.
func NewBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFilterer, error) {
	contract, err := bindBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFilterer{contract: contract}, nil
}

// bindBase binds a generic wrapper to an already deployed contract.
func bindBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.BaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xefd32692.
//
// Solidity: function balanceOfToken(uint256 tokenId) view returns(uint256)
func (_Base *BaseCaller) BalanceOfToken(opts *bind.CallOpts, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOfToken", tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfToken is a free data retrieval call binding the contract method 0xefd32692.
//
// Solidity: function balanceOfToken(uint256 tokenId) view returns(uint256)
func (_Base *BaseSession) BalanceOfToken(tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOfToken(&_Base.CallOpts, tokenId)
}

// BalanceOfToken is a free data retrieval call binding the contract method 0xefd32692.
//
// Solidity: function balanceOfToken(uint256 tokenId) view returns(uint256)
func (_Base *BaseCallerSession) BalanceOfToken(tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOfToken(&_Base.CallOpts, tokenId)
}

// GetAllTokenOwners is a free data retrieval call binding the contract method 0x3470edcf.
//
// Solidity: function getAllTokenOwners(uint256 tokenId) view returns(address[])
func (_Base *BaseCaller) GetAllTokenOwners(opts *bind.CallOpts, tokenId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getAllTokenOwners", tokenId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllTokenOwners is a free data retrieval call binding the contract method 0x3470edcf.
//
// Solidity: function getAllTokenOwners(uint256 tokenId) view returns(address[])
func (_Base *BaseSession) GetAllTokenOwners(tokenId *big.Int) ([]common.Address, error) {
	return _Base.Contract.GetAllTokenOwners(&_Base.CallOpts, tokenId)
}

// GetAllTokenOwners is a free data retrieval call binding the contract method 0x3470edcf.
//
// Solidity: function getAllTokenOwners(uint256 tokenId) view returns(address[])
func (_Base *BaseCallerSession) GetAllTokenOwners(tokenId *big.Int) ([]common.Address, error) {
	return _Base.Contract.GetAllTokenOwners(&_Base.CallOpts, tokenId)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseCaller) GetOwnedTokens(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getOwnedTokens", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseSession) GetOwnedTokens(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetOwnedTokens(&_Base.CallOpts, owner)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseCallerSession) GetOwnedTokens(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetOwnedTokens(&_Base.CallOpts, owner)
}

// GetOwnerAddresses is a free data retrieval call binding the contract method 0x36a0b2f5.
//
// Solidity: function getOwnerAddresses(uint256 tokenId) view returns(address[])
func (_Base *BaseCaller) GetOwnerAddresses(opts *bind.CallOpts, tokenId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getOwnerAddresses", tokenId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOwnerAddresses is a free data retrieval call binding the contract method 0x36a0b2f5.
//
// Solidity: function getOwnerAddresses(uint256 tokenId) view returns(address[])
func (_Base *BaseSession) GetOwnerAddresses(tokenId *big.Int) ([]common.Address, error) {
	return _Base.Contract.GetOwnerAddresses(&_Base.CallOpts, tokenId)
}

// GetOwnerAddresses is a free data retrieval call binding the contract method 0x36a0b2f5.
//
// Solidity: function getOwnerAddresses(uint256 tokenId) view returns(address[])
func (_Base *BaseCallerSession) GetOwnerAddresses(tokenId *big.Int) ([]common.Address, error) {
	return _Base.Contract.GetOwnerAddresses(&_Base.CallOpts, tokenId)
}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseCaller) GetOwnerOfToken(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getOwnerOfToken", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseSession) GetOwnerOfToken(tokenId *big.Int) (common.Address, error) {
	return _Base.Contract.GetOwnerOfToken(&_Base.CallOpts, tokenId)
}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseCallerSession) GetOwnerOfToken(tokenId *big.Int) (common.Address, error) {
	return _Base.Contract.GetOwnerOfToken(&_Base.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseCaller) OriginalCreators(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "originalCreators", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseSession) OriginalCreators(arg0 *big.Int) (common.Address, error) {
	return _Base.Contract.OriginalCreators(&_Base.CallOpts, arg0)
}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseCallerSession) OriginalCreators(arg0 *big.Int) (common.Address, error) {
	return _Base.Contract.OriginalCreators(&_Base.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// TokenNames is a free data retrieval call binding the contract method 0x310495ab.
//
// Solidity: function tokenNames(uint256 ) view returns(string)
func (_Base *BaseCaller) TokenNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "tokenNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenNames is a free data retrieval call binding the contract method 0x310495ab.
//
// Solidity: function tokenNames(uint256 ) view returns(string)
func (_Base *BaseSession) TokenNames(arg0 *big.Int) (string, error) {
	return _Base.Contract.TokenNames(&_Base.CallOpts, arg0)
}

// TokenNames is a free data retrieval call binding the contract method 0x310495ab.
//
// Solidity: function tokenNames(uint256 ) view returns(string)
func (_Base *BaseCallerSession) TokenNames(arg0 *big.Int) (string, error) {
	return _Base.Contract.TokenNames(&_Base.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Mint is a paid mutator transaction binding the contract method 0x10662e91.
//
// Solidity: function mint(string tokenName, uint256 amount, bytes data) returns()
func (_Base *BaseTransactor) Mint(opts *bind.TransactOpts, tokenName string, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "mint", tokenName, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x10662e91.
//
// Solidity: function mint(string tokenName, uint256 amount, bytes data) returns()
func (_Base *BaseSession) Mint(tokenName string, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, data)
}

// Mint is a paid mutator transaction binding the contract method 0x10662e91.
//
// Solidity: function mint(string tokenName, uint256 amount, bytes data) returns()
func (_Base *BaseTransactorSession) Mint(tokenName string, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// BaseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Base contract.
type BaseApprovalForAllIterator struct {
	Event *BaseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseApprovalForAll represents a ApprovalForAll event raised by the Base contract.
type BaseApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BaseApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BaseApprovalForAllIterator{contract: _Base.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BaseApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseApprovalForAll)
				if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) ParseApprovalForAll(log types.Log) (*BaseApprovalForAll, error) {
	event := new(BaseApprovalForAll)
	if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Base contract.
type BaseMintIterator struct {
	Event *BaseMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseMint represents a Mint event raised by the Base contract.
type BaseMint struct {
	From    common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*BaseMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &BaseMintIterator{contract: _Base.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *BaseMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseMint)
				if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) ParseMint(log types.Log) (*BaseMint, error) {
	event := new(BaseMint)
	if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Base contract.
type BaseTransferBatchIterator struct {
	Event *BaseTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferBatch represents a TransferBatch event raised by the Base contract.
type BaseTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferBatchIterator{contract: _Base.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BaseTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferBatch)
				if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) ParseTransferBatch(log types.Log) (*BaseTransferBatch, error) {
	event := new(BaseTransferBatch)
	if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Base contract.
type BaseTransferSingleIterator struct {
	Event *BaseTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferSingle represents a TransferSingle event raised by the Base contract.
type BaseTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferSingleIterator{contract: _Base.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BaseTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferSingle)
				if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) ParseTransferSingle(log types.Log) (*BaseTransferSingle, error) {
	event := new(BaseTransferSingle)
	if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Base contract.
type BaseURIIterator struct {
	Event *BaseURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseURI represents a URI event raised by the Base contract.
type BaseURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BaseURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BaseURIIterator{contract: _Base.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BaseURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseURI)
				if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) ParseURI(log types.Log) (*BaseURI, error) {
	event := new(BaseURI)
	if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
