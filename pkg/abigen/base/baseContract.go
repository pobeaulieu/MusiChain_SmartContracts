// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package base

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BaseMetaData contains all meta data concerning the Base contract.
var BaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractMetadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsPath\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDividends\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260016004553480156200001657600080fd5b50604051620037b3380380620037b383398181016040528101906200003c919062000143565b6040518060600160405280602981526020016200378a602991396200006781620000b060201b60201c565b5080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620004d6565b8060029081620000c19190620003ef565b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f782620000ca565b9050919050565b60006200010b82620000ea565b9050919050565b6200011d81620000fe565b81146200012957600080fd5b50565b6000815190506200013d8162000112565b92915050565b6000602082840312156200015c576200015b620000c5565b5b60006200016c848285016200012c565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001f757607f821691505b6020821081036200020d576200020c620001af565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002777fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000238565b62000283868362000238565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002d0620002ca620002c4846200029b565b620002a5565b6200029b565b9050919050565b6000819050919050565b620002ec83620002af565b62000304620002fb82620002d7565b84845462000245565b825550505050565b600090565b6200031b6200030c565b62000328818484620002e1565b505050565b5b8181101562000350576200034460008262000311565b6001810190506200032e565b5050565b601f8211156200039f57620003698162000213565b620003748462000228565b8101602085101562000384578190505b6200039c620003938562000228565b8301826200032d565b50505b505050565b600082821c905092915050565b6000620003c460001984600802620003a4565b1980831691505092915050565b6000620003df8383620003b1565b9150826002028217905092915050565b620003fa8262000175565b67ffffffffffffffff81111562000416576200041562000180565b5b620004228254620001de565b6200042f82828562000354565b600060209050601f83116001811462000467576000841562000452578287015190505b6200045e8582620003d1565b865550620004ce565b601f198416620004778662000213565b60005b82811015620004a1578489015182556001820191506020850194506020810190506200047a565b86831015620004c15784890151620004bd601f891682620003b1565b8355505b6001600288020188555050505b505050505050565b6132a480620004e66000396000f3fe6080604052600436106100a65760003560e01c8063590a5ce011610064578063590a5ce014610205578063a22cb46514610221578063c963483c1461024a578063e985e9c514610275578063f242432a146102b2578063faf0cc36146102db576100a6565b8062fdd58e146100ab57806301ffc9a7146100e85780630916bae5146101255780630e89341c146101625780632eb2c2d61461019f5780634e1273f4146101c8575b600080fd5b3480156100b757600080fd5b506100d260048036038101906100cd9190611b4c565b610304565b6040516100df9190611b9b565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a9190611c0e565b6103cc565b60405161011c9190611c56565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190611b4c565b6104ae565b6040516101599190611b9b565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190611c71565b6104c2565b6040516101969190611d2e565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c19190611f4d565b610556565b005b3480156101d457600080fd5b506101ef60048036038101906101ea91906120df565b6105f7565b6040516101fc9190612215565b60405180910390f35b61021f600480360381019061021a9190612237565b610710565b005b34801561022d57600080fd5b50610248600480360381019061024391906122a3565b610a99565b005b34801561025657600080fd5b5061025f610aaf565b60405161026c9190611b9b565b60405180910390f35b34801561028157600080fd5b5061029c600480360381019061029791906122e3565b610ab5565b6040516102a99190611c56565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612323565b610b49565b005b3480156102e757600080fd5b5061030260048036038101906102fd919061245b565b610bea565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036b906125ae565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104a757506104a682610cff565b5b9050919050565b60006104ba8383610304565b905092915050565b6060600280546104d1906125fd565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd906125fd565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b50505050509050919050565b61055e610d69565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806105a457506105a38561059e610d69565b610ab5565b5b6105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da906126a0565b60405180910390fd5b6105f08585858585610d71565b5050505050565b6060815183511461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490612732565b60405180910390fd5b6000835167ffffffffffffffff81111561065a57610659611d55565b5b6040519080825280602002602001820160405280156106885781602001602082028036833780820191505090505b50905060005b8451811015610705576106d58582815181106106ad576106ac612752565b5b60200260200101518583815181106106c8576106c7612752565b5b6020026020010151610304565b8282815181106106e8576106e7612752565b5b602002602001018181525050806106fe906127b0565b905061068e565b508091505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caa47fbf846040518263ffffffff1660e01b815260040161076d9190611b9b565b602060405180830381865afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae919061280d565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663681ece9d856040518263ffffffff1660e01b815260040161080d9190611b9b565b600060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061085391906128d1565b90503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba9061298c565b60405180910390fd5b6000815111610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe90612a1e565b60405180910390fd5b600181516109159190612a3e565b836109209190612a72565b341015610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990612b26565b60405180910390fd5b6000805b8251811015610a3f578373ffffffffffffffffffffffffffffffffffffffff1683828151811061099957610998612752565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610a2c578281815181106109cf576109ce612752565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015610a1c573d6000803e3d6000fd5b508482610a299190612b46565b91505b8080610a37906127b0565b915050610966565b503373ffffffffffffffffffffffffffffffffffffffff166108fc8234610a669190612a3e565b9081150290604051600060405180830381858888f19350505050158015610a91573d6000803e3d6000fd5b505050505050565b610aab610aa4610d69565b8383611092565b5050565b60045481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610b51610d69565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610b975750610b9685610b91610d69565b610ab5565b5b610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd906126a0565b60405180910390fd5b610be385858585856111fe565b5050505050565b600060046000815480929190610bff906127b0565b919050559050610c1133828885611499565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663decf3e6d8289888888336040518763ffffffff1660e01b8152600401610c7696959493929190612b89565b600060405180830381600087803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610cee9190611b9b565b60405180910390a250505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90612c6a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b90612cfc565b60405180910390fd5b6000610e2e610d69565b9050610e3e818787878787611649565b60005b8451811015610fef576000858281518110610e5f57610e5e612752565b5b602002602001015190506000858381518110610e7e57610e7d612752565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1690612d8e565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fd49190612b46565b9250508190555050505080610fe8906127b0565b9050610e41565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611066929190612dae565b60405180910390a461107c818787878787611651565b61108a818787878787611659565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f790612e57565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111f19190611c56565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361126d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126490612cfc565b60405180910390fd5b6000611277610d69565b9050600061128485611830565b9050600061129185611830565b90506112a1838989858589611649565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132f90612d8e565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ed9190612b46565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161146a929190612e77565b60405180910390a4611480848a8a86868a611651565b61148e848a8a8a8a8a6118aa565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ff90612f12565b60405180910390fd5b6000611512610d69565b9050600061151f85611830565b9050600061152c85611830565b905061153d83600089858589611649565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461159c9190612b46565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161161a929190612e77565b60405180910390a461163183600089858589611651565b611640836000898989896118aa565b50505050505050565b505050505050565b505050505050565b6116788473ffffffffffffffffffffffffffffffffffffffff16611a81565b15611828578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016116be959493929190612f87565b6020604051808303816000875af19250505080156116fa57506040513d601f19601f820116820180604052508101906116f79190613004565b60015b61179f5761170661303e565b806308c379a003611762575061171a613060565b806117255750611764565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117599190611d2e565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179690613162565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181d906131f4565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff81111561184f5761184e611d55565b5b60405190808252806020026020018201604052801561187d5781602001602082028036833780820191505090505b509050828160008151811061189557611894612752565b5b60200260200101818152505080915050919050565b6118c98473ffffffffffffffffffffffffffffffffffffffff16611a81565b15611a79578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161190f959493929190613214565b6020604051808303816000875af192505050801561194b57506040513d601f19601f820116820180604052508101906119489190613004565b60015b6119f05761195761303e565b806308c379a0036119b3575061196b613060565b8061197657506119b5565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119aa9190611d2e565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e790613162565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6e906131f4565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae382611ab8565b9050919050565b611af381611ad8565b8114611afe57600080fd5b50565b600081359050611b1081611aea565b92915050565b6000819050919050565b611b2981611b16565b8114611b3457600080fd5b50565b600081359050611b4681611b20565b92915050565b60008060408385031215611b6357611b62611aae565b5b6000611b7185828601611b01565b9250506020611b8285828601611b37565b9150509250929050565b611b9581611b16565b82525050565b6000602082019050611bb06000830184611b8c565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611beb81611bb6565b8114611bf657600080fd5b50565b600081359050611c0881611be2565b92915050565b600060208284031215611c2457611c23611aae565b5b6000611c3284828501611bf9565b91505092915050565b60008115159050919050565b611c5081611c3b565b82525050565b6000602082019050611c6b6000830184611c47565b92915050565b600060208284031215611c8757611c86611aae565b5b6000611c9584828501611b37565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611cd8578082015181840152602081019050611cbd565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d0082611c9e565b611d0a8185611ca9565b9350611d1a818560208601611cba565b611d2381611ce4565b840191505092915050565b60006020820190508181036000830152611d488184611cf5565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d8d82611ce4565b810181811067ffffffffffffffff82111715611dac57611dab611d55565b5b80604052505050565b6000611dbf611aa4565b9050611dcb8282611d84565b919050565b600067ffffffffffffffff821115611deb57611dea611d55565b5b602082029050602081019050919050565b600080fd5b6000611e14611e0f84611dd0565b611db5565b90508083825260208201905060208402830185811115611e3757611e36611dfc565b5b835b81811015611e605780611e4c8882611b37565b845260208401935050602081019050611e39565b5050509392505050565b600082601f830112611e7f57611e7e611d50565b5b8135611e8f848260208601611e01565b91505092915050565b600080fd5b600067ffffffffffffffff821115611eb857611eb7611d55565b5b611ec182611ce4565b9050602081019050919050565b82818337600083830152505050565b6000611ef0611eeb84611e9d565b611db5565b905082815260208101848484011115611f0c57611f0b611e98565b5b611f17848285611ece565b509392505050565b600082601f830112611f3457611f33611d50565b5b8135611f44848260208601611edd565b91505092915050565b600080600080600060a08688031215611f6957611f68611aae565b5b6000611f7788828901611b01565b9550506020611f8888828901611b01565b945050604086013567ffffffffffffffff811115611fa957611fa8611ab3565b5b611fb588828901611e6a565b935050606086013567ffffffffffffffff811115611fd657611fd5611ab3565b5b611fe288828901611e6a565b925050608086013567ffffffffffffffff81111561200357612002611ab3565b5b61200f88828901611f1f565b9150509295509295909350565b600067ffffffffffffffff82111561203757612036611d55565b5b602082029050602081019050919050565b600061205b6120568461201c565b611db5565b9050808382526020820190506020840283018581111561207e5761207d611dfc565b5b835b818110156120a757806120938882611b01565b845260208401935050602081019050612080565b5050509392505050565b600082601f8301126120c6576120c5611d50565b5b81356120d6848260208601612048565b91505092915050565b600080604083850312156120f6576120f5611aae565b5b600083013567ffffffffffffffff81111561211457612113611ab3565b5b612120858286016120b1565b925050602083013567ffffffffffffffff81111561214157612140611ab3565b5b61214d85828601611e6a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218c81611b16565b82525050565b600061219e8383612183565b60208301905092915050565b6000602082019050919050565b60006121c282612157565b6121cc8185612162565b93506121d783612173565b8060005b838110156122085781516121ef8882612192565b97506121fa836121aa565b9250506001810190506121db565b5085935050505092915050565b6000602082019050818103600083015261222f81846121b7565b905092915050565b6000806040838503121561224e5761224d611aae565b5b600061225c85828601611b37565b925050602061226d85828601611b37565b9150509250929050565b61228081611c3b565b811461228b57600080fd5b50565b60008135905061229d81612277565b92915050565b600080604083850312156122ba576122b9611aae565b5b60006122c885828601611b01565b92505060206122d98582860161228e565b9150509250929050565b600080604083850312156122fa576122f9611aae565b5b600061230885828601611b01565b925050602061231985828601611b01565b9150509250929050565b600080600080600060a0868803121561233f5761233e611aae565b5b600061234d88828901611b01565b955050602061235e88828901611b01565b945050604061236f88828901611b37565b935050606061238088828901611b37565b925050608086013567ffffffffffffffff8111156123a1576123a0611ab3565b5b6123ad88828901611f1f565b9150509295509295909350565b600067ffffffffffffffff8211156123d5576123d4611d55565b5b6123de82611ce4565b9050602081019050919050565b60006123fe6123f9846123ba565b611db5565b90508281526020810184848401111561241a57612419611e98565b5b612425848285611ece565b509392505050565b600082601f83011261244257612441611d50565b5b81356124528482602086016123eb565b91505092915050565b60008060008060008060c0878903121561247857612477611aae565b5b600087013567ffffffffffffffff81111561249657612495611ab3565b5b6124a289828a0161242d565b96505060206124b389828a01611b37565b955050604087013567ffffffffffffffff8111156124d4576124d3611ab3565b5b6124e089828a0161242d565b94505060606124f189828a01611b37565b935050608061250289828a01611b37565b92505060a087013567ffffffffffffffff81111561252357612522611ab3565b5b61252f89828a01611f1f565b9150509295509295509295565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612598602a83611ca9565b91506125a38261253c565b604082019050919050565b600060208201905081810360008301526125c78161258b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061261557607f821691505b602082108103612628576126276125ce565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b600061268a602e83611ca9565b91506126958261262e565b604082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061271c602983611ca9565b9150612727826126c0565b604082019050919050565b6000602082019050818103600083015261274b8161270f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127bb82611b16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127ed576127ec612781565b5b600182019050919050565b60008151905061280781611aea565b92915050565b60006020828403121561282357612822611aae565b5b6000612831848285016127f8565b91505092915050565b600061284d6128488461201c565b611db5565b905080838252602082019050602084028301858111156128705761286f611dfc565b5b835b81811015612899578061288588826127f8565b845260208401935050602081019050612872565b5050509392505050565b600082601f8301126128b8576128b7611d50565b5b81516128c884826020860161283a565b91505092915050565b6000602082840312156128e7576128e6611aae565b5b600082015167ffffffffffffffff81111561290557612904611ab3565b5b612911848285016128a3565b91505092915050565b7f4f6e6c7920746865206f726967696e616c2063726561746f722063616e20736560008201527f6e64204574686572000000000000000000000000000000000000000000000000602082015250565b6000612976602883611ca9565b91506129818261291a565b604082019050919050565b600060208201905081810360008301526129a581612969565b9050919050565b7f546f6b656e20646f6573206e6f74206578697374206f7220686173206e6f206f60008201527f776e657273000000000000000000000000000000000000000000000000000000602082015250565b6000612a08602583611ca9565b9150612a13826129ac565b604082019050919050565b60006020820190508181036000830152612a37816129fb565b9050919050565b6000612a4982611b16565b9150612a5483611b16565b9250828203905081811115612a6c57612a6b612781565b5b92915050565b6000612a7d82611b16565b9150612a8883611b16565b9250828202612a9681611b16565b91508282048414831517612aad57612aac612781565b5b5092915050565b7f53656e742076616c7565206973206c657373207468616e20746865207265717560008201527f6972656420746f74616c00000000000000000000000000000000000000000000602082015250565b6000612b10602a83611ca9565b9150612b1b82612ab4565b604082019050919050565b60006020820190508181036000830152612b3f81612b03565b9050919050565b6000612b5182611b16565b9150612b5c83611b16565b9250828201905080821115612b7457612b73612781565b5b92915050565b612b8381611ad8565b82525050565b600060c082019050612b9e6000830189611b8c565b8181036020830152612bb08188611cf5565b90508181036040830152612bc48187611cf5565b9050612bd36060830186611b8c565b612be06080830185611b8c565b612bed60a0830184612b7a565b979650505050505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612c54602883611ca9565b9150612c5f82612bf8565b604082019050919050565b60006020820190508181036000830152612c8381612c47565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ce6602583611ca9565b9150612cf182612c8a565b604082019050919050565b60006020820190508181036000830152612d1581612cd9565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612d78602a83611ca9565b9150612d8382612d1c565b604082019050919050565b60006020820190508181036000830152612da781612d6b565b9050919050565b60006040820190508181036000830152612dc881856121b7565b90508181036020830152612ddc81846121b7565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612e41602983611ca9565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b6000604082019050612e8c6000830185611b8c565b612e996020830184611b8c565b9392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612efc602183611ca9565b9150612f0782612ea0565b604082019050919050565b60006020820190508181036000830152612f2b81612eef565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f5982612f32565b612f638185612f3d565b9350612f73818560208601611cba565b612f7c81611ce4565b840191505092915050565b600060a082019050612f9c6000830188612b7a565b612fa96020830187612b7a565b8181036040830152612fbb81866121b7565b90508181036060830152612fcf81856121b7565b90508181036080830152612fe38184612f4e565b90509695505050505050565b600081519050612ffe81611be2565b92915050565b60006020828403121561301a57613019611aae565b5b600061302884828501612fef565b91505092915050565b60008160e01c9050919050565b600060033d111561305d5760046000803e61305a600051613031565b90505b90565b600060443d106130ed57613072611aa4565b60043d036004823e80513d602482011167ffffffffffffffff8211171561309a5750506130ed565b808201805167ffffffffffffffff8111156130b857505050506130ed565b80602083010160043d0385018111156130d55750505050506130ed565b6130e482602001850186611d84565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061314c603483611ca9565b9150613157826130f0565b604082019050919050565b6000602082019050818103600083015261317b8161313f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006131de602883611ca9565b91506131e982613182565b604082019050919050565b6000602082019050818103600083015261320d816131d1565b9050919050565b600060a0820190506132296000830188612b7a565b6132366020830187612b7a565b6132436040830186611b8c565b6132506060830185611b8c565b81810360808301526132628184612f4e565b9050969550505050505056fea2646970667358221220adbac94f3a52f96843e1a4afc3595ad7390a4b924455f51e7a47b5332d9a870f64736f6c6343000812003368747470733a2f2f6d757369636861696e2e636f6d2f6170692f746f6b656e2f7b69647d2e6a736f6e",
}

// BaseABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseMetaData.ABI instead.
var BaseABI = BaseMetaData.ABI

// BaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseMetaData.Bin instead.
var BaseBin = BaseMetaData.Bin

// DeployBase deploys a new Ethereum contract, binding an instance of Base to it.
func DeployBase(auth *bind.TransactOpts, backend bind.ContractBackend, _metadata common.Address) (common.Address, *types.Transaction, *Base, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseBin), backend, _metadata)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// Base is an auto generated Go binding around an Ethereum contract.
type Base struct {
	BaseCaller     // Read-only binding to the contract
	BaseTransactor // Write-only binding to the contract
	BaseFilterer   // Log filterer for contract events
}

// BaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseSession struct {
	Contract     *Base             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseCallerSession struct {
	Contract *BaseCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTransactorSession struct {
	Contract     *BaseTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseRaw struct {
	Contract *Base // Generic contract binding to access the raw methods on
}

// BaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseCallerRaw struct {
	Contract *BaseCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTransactorRaw struct {
	Contract *BaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBase creates a new instance of Base, bound to a specific deployed contract.
func NewBase(address common.Address, backend bind.ContractBackend) (*Base, error) {
	contract, err := bindBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// NewBaseCaller creates a new read-only instance of Base, bound to a specific deployed contract.
func NewBaseCaller(address common.Address, caller bind.ContractCaller) (*BaseCaller, error) {
	contract, err := bindBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseCaller{contract: contract}, nil
}

// NewBaseTransactor creates a new write-only instance of Base, bound to a specific deployed contract.
func NewBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTransactor, error) {
	contract, err := bindBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTransactor{contract: contract}, nil
}

// NewBaseFilterer creates a new log filterer instance of Base, bound to a specific deployed contract.
func NewBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFilterer, error) {
	contract, err := bindBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFilterer{contract: contract}, nil
}

// bindBase binds a generic wrapper to an already deployed contract.
func bindBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.BaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.contract.Transact(opts, method, params...)
}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseCaller) CurrentTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "_currentTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseSession) CurrentTokenId() (*big.Int, error) {
	return _Base.Contract.CurrentTokenId(&_Base.CallOpts)
}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseCallerSession) CurrentTokenId() (*big.Int, error) {
	return _Base.Contract.CurrentTokenId(&_Base.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseCaller) GetTokenBalance(opts *bind.CallOpts, account common.Address, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getTokenBalance", account, tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseSession) GetTokenBalance(account common.Address, tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.GetTokenBalance(&_Base.CallOpts, account, tokenId)
}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseCallerSession) GetTokenBalance(account common.Address, tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.GetTokenBalance(&_Base.CallOpts, account, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseTransactor) Mint(opts *bind.TransactOpts, tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "mint", tokenName, amount, ipfsPath, ticketPool, div, data)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseSession) Mint(tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, ipfsPath, ticketPool, div, data)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseTransactorSession) Mint(tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, ipfsPath, ticketPool, div, data)
}

// PayDividends is a paid mutator transaction binding the contract method 0x590a5ce0.
//
// Solidity: function payDividends(uint256 tokenId, uint256 amount) payable returns()
func (_Base *BaseTransactor) PayDividends(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "payDividends", tokenId, amount)
}

// PayDividends is a paid mutator transaction binding the contract method 0x590a5ce0.
//
// Solidity: function payDividends(uint256 tokenId, uint256 amount) payable returns()
func (_Base *BaseSession) PayDividends(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Base.Contract.PayDividends(&_Base.TransactOpts, tokenId, amount)
}

// PayDividends is a paid mutator transaction binding the contract method 0x590a5ce0.
//
// Solidity: function payDividends(uint256 tokenId, uint256 amount) payable returns()
func (_Base *BaseTransactorSession) PayDividends(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Base.Contract.PayDividends(&_Base.TransactOpts, tokenId, amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// BaseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Base contract.
type BaseApprovalForAllIterator struct {
	Event *BaseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseApprovalForAll represents a ApprovalForAll event raised by the Base contract.
type BaseApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BaseApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BaseApprovalForAllIterator{contract: _Base.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BaseApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseApprovalForAll)
				if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) ParseApprovalForAll(log types.Log) (*BaseApprovalForAll, error) {
	event := new(BaseApprovalForAll)
	if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Base contract.
type BaseMintIterator struct {
	Event *BaseMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseMint represents a Mint event raised by the Base contract.
type BaseMint struct {
	From    common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*BaseMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &BaseMintIterator{contract: _Base.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *BaseMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseMint)
				if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) ParseMint(log types.Log) (*BaseMint, error) {
	event := new(BaseMint)
	if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Base contract.
type BaseTransferBatchIterator struct {
	Event *BaseTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferBatch represents a TransferBatch event raised by the Base contract.
type BaseTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferBatchIterator{contract: _Base.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BaseTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferBatch)
				if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) ParseTransferBatch(log types.Log) (*BaseTransferBatch, error) {
	event := new(BaseTransferBatch)
	if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Base contract.
type BaseTransferSingleIterator struct {
	Event *BaseTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferSingle represents a TransferSingle event raised by the Base contract.
type BaseTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferSingleIterator{contract: _Base.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BaseTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferSingle)
				if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) ParseTransferSingle(log types.Log) (*BaseTransferSingle, error) {
	event := new(BaseTransferSingle)
	if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Base contract.
type BaseURIIterator struct {
	Event *BaseURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseURI represents a URI event raised by the Base contract.
type BaseURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BaseURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BaseURIIterator{contract: _Base.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BaseURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseURI)
				if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) ParseURI(log types.Log) (*BaseURI, error) {
	event := new(BaseURI)
	if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
