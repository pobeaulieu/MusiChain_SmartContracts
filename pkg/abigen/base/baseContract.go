// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package base

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BaseMetaData contains all meta data concerning the Base contract.
var BaseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractMetadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokensCreatedBy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsPath\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalCreators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405260016005553480156200001657600080fd5b50604051620035e1380380620035e183398181016040528101906200003c919062000143565b604051806060016040528060298152602001620035b8602991396200006781620000b060201b60201c565b5080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620004d6565b8060029081620000c19190620003ef565b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f782620000ca565b9050919050565b60006200010b82620000ea565b9050919050565b6200011d81620000fe565b81146200012957600080fd5b50565b6000815190506200013d8162000112565b92915050565b6000602082840312156200015c576200015b620000c5565b5b60006200016c848285016200012c565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001f757607f821691505b6020821081036200020d576200020c620001af565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002777fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000238565b62000283868362000238565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002d0620002ca620002c4846200029b565b620002a5565b6200029b565b9050919050565b6000819050919050565b620002ec83620002af565b62000304620002fb82620002d7565b84845462000245565b825550505050565b600090565b6200031b6200030c565b62000328818484620002e1565b505050565b5b8181101562000350576200034460008262000311565b6001810190506200032e565b5050565b601f8211156200039f57620003698162000213565b620003748462000228565b8101602085101562000384578190505b6200039c620003938562000228565b8301826200032d565b50505b505050565b600082821c905092915050565b6000620003c460001984600802620003a4565b1980831691505092915050565b6000620003df8383620003b1565b9150826002028217905092915050565b620003fa8262000175565b67ffffffffffffffff81111562000416576200041562000180565b5b620004228254620001de565b6200042f82828562000354565b600060209050601f83116001811462000467576000841562000452578287015190505b6200045e8582620003d1565b865550620004ce565b601f198416620004778662000213565b60005b82811015620004a1578489015182556001820191506020850194506020810190506200047a565b86831015620004c15784890151620004bd601f891682620003b1565b8355505b6001600288020188555050505b505050505050565b6130d280620004e66000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80638b30593011610097578063ddc0f31211610066578063ddc0f312146102cf578063e985e9c5146102ff578063f242432a1461032f578063faf0cc361461034b576100f4565b80638b30593014610235578063a22cb46514610265578063c963483c14610281578063d9d616551461029f576100f4565b80630e89341c116100d35780630e89341c146101895780632eb2c2d6146101b95780634e1273f4146101d55780637f1dd80b14610205576100f4565b8062fdd58e146100f957806301ffc9a7146101295780630916bae514610159575b600080fd5b610113600480360381019061010e9190611c2e565b610367565b6040516101209190611c7d565b60405180910390f35b610143600480360381019061013e9190611cf0565b61042f565b6040516101509190611d38565b60405180910390f35b610173600480360381019061016e9190611c2e565b610511565b6040516101809190611c7d565b60405180910390f35b6101a3600480360381019061019e9190611d53565b610525565b6040516101b09190611e10565b60405180910390f35b6101d360048036038101906101ce919061202f565b6105b9565b005b6101ef60048036038101906101ea91906121c1565b61065a565b6040516101fc91906122f7565b60405180910390f35b61021f600480360381019061021a9190611d53565b610773565b60405161022c9190612328565b60405180910390f35b61024f600480360381019061024a9190611d53565b61088a565b60405161025c9190612328565b60405180910390f35b61027f600480360381019061027a919061236f565b6108bd565b005b6102896108d3565b6040516102969190611c7d565b60405180910390f35b6102b960048036038101906102b491906123af565b6108d9565b6040516102c691906122f7565b60405180910390f35b6102e960048036038101906102e491906123af565b610970565b6040516102f691906122f7565b60405180910390f35b610319600480360381019061031491906123dc565b610a07565b6040516103269190611d38565b60405180910390f35b6103496004803603810190610344919061241c565b610a9b565b005b61036560048036038101906103609190612554565b610b3c565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce906126a7565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fa57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050a575061050982610de1565b5b9050919050565b600061051d8383610367565b905092915050565b606060028054610534906126f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610560906126f6565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b50505050509050919050565b6105c1610e4b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610607575061060685610601610e4b565b610a07565b5b610646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063d90612799565b60405180910390fd5b6106538585858585610e53565b5050505050565b606081518351146106a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106979061282b565b60405180910390fd5b6000835167ffffffffffffffff8111156106bd576106bc611e37565b5b6040519080825280602002602001820160405280156106eb5781602001602082028036833780820191505090505b50905060005b8451811015610768576107388582815181106107105761070f61284b565b5b602002602001015185838151811061072b5761072a61284b565b5b6020026020010151610367565b82828151811061074b5761074a61284b565b5b60200260200101818152505080610761906128a9565b90506106f1565b508091505092915050565b6000806003600084815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561080957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107bf575b5050505050905060008151111561084a57806001825161082991906128f1565b8151811061083a5761083961284b565b5b6020026020010151915050610885565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90612971565b60405180910390fd5b919050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108cf6108c8610e4b565b8383611174565b5050565b60055481565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561096457602002820191906000526020600020905b815481526020019060010190808311610950575b50505050509050919050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109fb57602002820191906000526020600020905b8154815260200190600101908083116109e7575b50505050509050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610aa3610e4b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ae95750610ae885610ae3610e4b565b610a07565b5b610b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1f90612799565b60405180910390fd5b610b3585858585856112e0565b5050505050565b600060056000815480929190610b51906128a9565b919050559050610b633382888561157b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb4368ca82898888886040518663ffffffff1660e01b8152600401610bc6959493929190612991565b600060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b5050505060036000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610dd09190611c7d565b60405180910390a250505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e90612a64565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd90612af6565b60405180910390fd5b6000610f10610e4b565b9050610f2081878787878761172b565b60005b84518110156110d1576000858281518110610f4157610f4061284b565b5b602002602001015190506000858381518110610f6057610f5f61284b565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff890612b88565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110b69190612ba8565b92505081905550505050806110ca906128a9565b9050610f23565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611148929190612bdc565b60405180910390a461115e818787878787611733565b61116c81878787878761173b565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990612c85565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112d39190611d38565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361134f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134690612af6565b60405180910390fd5b6000611359610e4b565b9050600061136685611912565b9050600061137385611912565b905061138383898985858961172b565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561141a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141190612b88565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114cf9190612ba8565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161154c929190612ca5565b60405180910390a4611562848a8a86868a611733565b611570848a8a8a8a8a61198c565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e190612d40565b60405180910390fd5b60006115f4610e4b565b9050600061160185611912565b9050600061160e85611912565b905061161f8360008985858961172b565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167e9190612ba8565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516116fc929190612ca5565b60405180910390a461171383600089858589611733565b6117228360008989898961198c565b50505050505050565b505050505050565b505050505050565b61175a8473ffffffffffffffffffffffffffffffffffffffff16611b63565b1561190a578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016117a0959493929190612db5565b6020604051808303816000875af19250505080156117dc57506040513d601f19601f820116820180604052508101906117d99190612e32565b60015b611881576117e8612e6c565b806308c379a00361184457506117fc612e8e565b806118075750611846565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183b9190611e10565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187890612f90565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ff90613022565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff81111561193157611930611e37565b5b60405190808252806020026020018201604052801561195f5781602001602082028036833780820191505090505b50905082816000815181106119775761197661284b565b5b60200260200101818152505080915050919050565b6119ab8473ffffffffffffffffffffffffffffffffffffffff16611b63565b15611b5b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016119f1959493929190613042565b6020604051808303816000875af1925050508015611a2d57506040513d601f19601f82011682018060405250810190611a2a9190612e32565b60015b611ad257611a39612e6c565b806308c379a003611a955750611a4d612e8e565b80611a585750611a97565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8c9190611e10565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac990612f90565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5090613022565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611bc582611b9a565b9050919050565b611bd581611bba565b8114611be057600080fd5b50565b600081359050611bf281611bcc565b92915050565b6000819050919050565b611c0b81611bf8565b8114611c1657600080fd5b50565b600081359050611c2881611c02565b92915050565b60008060408385031215611c4557611c44611b90565b5b6000611c5385828601611be3565b9250506020611c6485828601611c19565b9150509250929050565b611c7781611bf8565b82525050565b6000602082019050611c926000830184611c6e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ccd81611c98565b8114611cd857600080fd5b50565b600081359050611cea81611cc4565b92915050565b600060208284031215611d0657611d05611b90565b5b6000611d1484828501611cdb565b91505092915050565b60008115159050919050565b611d3281611d1d565b82525050565b6000602082019050611d4d6000830184611d29565b92915050565b600060208284031215611d6957611d68611b90565b5b6000611d7784828501611c19565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611dba578082015181840152602081019050611d9f565b60008484015250505050565b6000601f19601f8301169050919050565b6000611de282611d80565b611dec8185611d8b565b9350611dfc818560208601611d9c565b611e0581611dc6565b840191505092915050565b60006020820190508181036000830152611e2a8184611dd7565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e6f82611dc6565b810181811067ffffffffffffffff82111715611e8e57611e8d611e37565b5b80604052505050565b6000611ea1611b86565b9050611ead8282611e66565b919050565b600067ffffffffffffffff821115611ecd57611ecc611e37565b5b602082029050602081019050919050565b600080fd5b6000611ef6611ef184611eb2565b611e97565b90508083825260208201905060208402830185811115611f1957611f18611ede565b5b835b81811015611f425780611f2e8882611c19565b845260208401935050602081019050611f1b565b5050509392505050565b600082601f830112611f6157611f60611e32565b5b8135611f71848260208601611ee3565b91505092915050565b600080fd5b600067ffffffffffffffff821115611f9a57611f99611e37565b5b611fa382611dc6565b9050602081019050919050565b82818337600083830152505050565b6000611fd2611fcd84611f7f565b611e97565b905082815260208101848484011115611fee57611fed611f7a565b5b611ff9848285611fb0565b509392505050565b600082601f83011261201657612015611e32565b5b8135612026848260208601611fbf565b91505092915050565b600080600080600060a0868803121561204b5761204a611b90565b5b600061205988828901611be3565b955050602061206a88828901611be3565b945050604086013567ffffffffffffffff81111561208b5761208a611b95565b5b61209788828901611f4c565b935050606086013567ffffffffffffffff8111156120b8576120b7611b95565b5b6120c488828901611f4c565b925050608086013567ffffffffffffffff8111156120e5576120e4611b95565b5b6120f188828901612001565b9150509295509295909350565b600067ffffffffffffffff82111561211957612118611e37565b5b602082029050602081019050919050565b600061213d612138846120fe565b611e97565b905080838252602082019050602084028301858111156121605761215f611ede565b5b835b8181101561218957806121758882611be3565b845260208401935050602081019050612162565b5050509392505050565b600082601f8301126121a8576121a7611e32565b5b81356121b884826020860161212a565b91505092915050565b600080604083850312156121d8576121d7611b90565b5b600083013567ffffffffffffffff8111156121f6576121f5611b95565b5b61220285828601612193565b925050602083013567ffffffffffffffff81111561222357612222611b95565b5b61222f85828601611f4c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61226e81611bf8565b82525050565b60006122808383612265565b60208301905092915050565b6000602082019050919050565b60006122a482612239565b6122ae8185612244565b93506122b983612255565b8060005b838110156122ea5781516122d18882612274565b97506122dc8361228c565b9250506001810190506122bd565b5085935050505092915050565b600060208201905081810360008301526123118184612299565b905092915050565b61232281611bba565b82525050565b600060208201905061233d6000830184612319565b92915050565b61234c81611d1d565b811461235757600080fd5b50565b60008135905061236981612343565b92915050565b6000806040838503121561238657612385611b90565b5b600061239485828601611be3565b92505060206123a58582860161235a565b9150509250929050565b6000602082840312156123c5576123c4611b90565b5b60006123d384828501611be3565b91505092915050565b600080604083850312156123f3576123f2611b90565b5b600061240185828601611be3565b925050602061241285828601611be3565b9150509250929050565b600080600080600060a0868803121561243857612437611b90565b5b600061244688828901611be3565b955050602061245788828901611be3565b945050604061246888828901611c19565b935050606061247988828901611c19565b925050608086013567ffffffffffffffff81111561249a57612499611b95565b5b6124a688828901612001565b9150509295509295909350565b600067ffffffffffffffff8211156124ce576124cd611e37565b5b6124d782611dc6565b9050602081019050919050565b60006124f76124f2846124b3565b611e97565b90508281526020810184848401111561251357612512611f7a565b5b61251e848285611fb0565b509392505050565b600082601f83011261253b5761253a611e32565b5b813561254b8482602086016124e4565b91505092915050565b60008060008060008060c0878903121561257157612570611b90565b5b600087013567ffffffffffffffff81111561258f5761258e611b95565b5b61259b89828a01612526565b96505060206125ac89828a01611c19565b955050604087013567ffffffffffffffff8111156125cd576125cc611b95565b5b6125d989828a01612526565b94505060606125ea89828a01611c19565b93505060806125fb89828a01611c19565b92505060a087013567ffffffffffffffff81111561261c5761261b611b95565b5b61262889828a01612001565b9150509295509295509295565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612691602a83611d8b565b915061269c82612635565b604082019050919050565b600060208201905081810360008301526126c081612684565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270e57607f821691505b602082108103612721576127206126c7565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612783602e83611d8b565b915061278e82612727565b604082019050919050565b600060208201905081810360008301526127b281612776565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612815602983611d8b565b9150612820826127b9565b604082019050919050565b6000602082019050818103600083015261284481612808565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b482611bf8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128e6576128e561287a565b5b600182019050919050565b60006128fc82611bf8565b915061290783611bf8565b925082820390508181111561291f5761291e61287a565b5b92915050565b7f546f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b600061295b601483611d8b565b915061296682612925565b602082019050919050565b6000602082019050818103600083015261298a8161294e565b9050919050565b600060a0820190506129a66000830188611c6e565b81810360208301526129b88187611dd7565b905081810360408301526129cc8186611dd7565b90506129db6060830185611c6e565b6129e86080830184611c6e565b9695505050505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612a4e602883611d8b565b9150612a59826129f2565b604082019050919050565b60006020820190508181036000830152612a7d81612a41565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ae0602583611d8b565b9150612aeb82612a84565b604082019050919050565b60006020820190508181036000830152612b0f81612ad3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612b72602a83611d8b565b9150612b7d82612b16565b604082019050919050565b60006020820190508181036000830152612ba181612b65565b9050919050565b6000612bb382611bf8565b9150612bbe83611bf8565b9250828201905080821115612bd657612bd561287a565b5b92915050565b60006040820190508181036000830152612bf68185612299565b90508181036020830152612c0a8184612299565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612c6f602983611d8b565b9150612c7a82612c13565b604082019050919050565b60006020820190508181036000830152612c9e81612c62565b9050919050565b6000604082019050612cba6000830185611c6e565b612cc76020830184611c6e565b9392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d2a602183611d8b565b9150612d3582612cce565b604082019050919050565b60006020820190508181036000830152612d5981612d1d565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d8782612d60565b612d918185612d6b565b9350612da1818560208601611d9c565b612daa81611dc6565b840191505092915050565b600060a082019050612dca6000830188612319565b612dd76020830187612319565b8181036040830152612de98186612299565b90508181036060830152612dfd8185612299565b90508181036080830152612e118184612d7c565b90509695505050505050565b600081519050612e2c81611cc4565b92915050565b600060208284031215612e4857612e47611b90565b5b6000612e5684828501612e1d565b91505092915050565b60008160e01c9050919050565b600060033d1115612e8b5760046000803e612e88600051612e5f565b90505b90565b600060443d10612f1b57612ea0611b86565b60043d036004823e80513d602482011167ffffffffffffffff82111715612ec8575050612f1b565b808201805167ffffffffffffffff811115612ee65750505050612f1b565b80602083010160043d038501811115612f03575050505050612f1b565b612f1282602001850186611e66565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000612f7a603483611d8b565b9150612f8582612f1e565b604082019050919050565b60006020820190508181036000830152612fa981612f6d565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061300c602883611d8b565b915061301782612fb0565b604082019050919050565b6000602082019050818103600083015261303b81612fff565b9050919050565b600060a0820190506130576000830188612319565b6130646020830187612319565b6130716040830186611c6e565b61307e6060830185611c6e565b81810360808301526130908184612d7c565b9050969550505050505056fea2646970667358221220b725e27f659c6992f3336afd0951f591c1ab46be65b85a7047eba2343e97f19a64736f6c6343000812003368747470733a2f2f6d757369636861696e2e636f6d2f6170692f746f6b656e2f7b69647d2e6a736f6e",
}

// BaseABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseMetaData.ABI instead.
var BaseABI = BaseMetaData.ABI

// BaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseMetaData.Bin instead.
var BaseBin = BaseMetaData.Bin

// DeployBase deploys a new Ethereum contract, binding an instance of Base to it.
func DeployBase(auth *bind.TransactOpts, backend bind.ContractBackend, _metadata common.Address) (common.Address, *types.Transaction, *Base, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseBin), backend, _metadata)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// Base is an auto generated Go binding around an Ethereum contract.
type Base struct {
	BaseCaller     // Read-only binding to the contract
	BaseTransactor // Write-only binding to the contract
	BaseFilterer   // Log filterer for contract events
}

// BaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseSession struct {
	Contract     *Base             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseCallerSession struct {
	Contract *BaseCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseTransactorSession struct {
	Contract     *BaseTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseRaw struct {
	Contract *Base // Generic contract binding to access the raw methods on
}

// BaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseCallerRaw struct {
	Contract *BaseCaller // Generic read-only contract binding to access the raw methods on
}

// BaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseTransactorRaw struct {
	Contract *BaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBase creates a new instance of Base, bound to a specific deployed contract.
func NewBase(address common.Address, backend bind.ContractBackend) (*Base, error) {
	contract, err := bindBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Base{BaseCaller: BaseCaller{contract: contract}, BaseTransactor: BaseTransactor{contract: contract}, BaseFilterer: BaseFilterer{contract: contract}}, nil
}

// NewBaseCaller creates a new read-only instance of Base, bound to a specific deployed contract.
func NewBaseCaller(address common.Address, caller bind.ContractCaller) (*BaseCaller, error) {
	contract, err := bindBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseCaller{contract: contract}, nil
}

// NewBaseTransactor creates a new write-only instance of Base, bound to a specific deployed contract.
func NewBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTransactor, error) {
	contract, err := bindBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTransactor{contract: contract}, nil
}

// NewBaseFilterer creates a new log filterer instance of Base, bound to a specific deployed contract.
func NewBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFilterer, error) {
	contract, err := bindBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFilterer{contract: contract}, nil
}

// bindBase binds a generic wrapper to an already deployed contract.
func bindBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.BaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.BaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Base *BaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Base.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Base *BaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Base.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Base *BaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Base.Contract.contract.Transact(opts, method, params...)
}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseCaller) CurrentTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "_currentTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseSession) CurrentTokenId() (*big.Int, error) {
	return _Base.Contract.CurrentTokenId(&_Base.CallOpts)
}

// CurrentTokenId is a free data retrieval call binding the contract method 0xc963483c.
//
// Solidity: function _currentTokenId() view returns(uint256)
func (_Base *BaseCallerSession) CurrentTokenId() (*big.Int, error) {
	return _Base.Contract.CurrentTokenId(&_Base.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Base *BaseCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Base.Contract.BalanceOf(&_Base.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Base *BaseCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Base.Contract.BalanceOfBatch(&_Base.CallOpts, accounts, ids)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseCaller) GetOwnedTokens(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getOwnedTokens", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseSession) GetOwnedTokens(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetOwnedTokens(&_Base.CallOpts, owner)
}

// GetOwnedTokens is a free data retrieval call binding the contract method 0xd9d61655.
//
// Solidity: function getOwnedTokens(address owner) view returns(uint256[])
func (_Base *BaseCallerSession) GetOwnedTokens(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetOwnedTokens(&_Base.CallOpts, owner)
}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseCaller) GetOwnerOfToken(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getOwnerOfToken", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseSession) GetOwnerOfToken(tokenId *big.Int) (common.Address, error) {
	return _Base.Contract.GetOwnerOfToken(&_Base.CallOpts, tokenId)
}

// GetOwnerOfToken is a free data retrieval call binding the contract method 0x7f1dd80b.
//
// Solidity: function getOwnerOfToken(uint256 tokenId) view returns(address)
func (_Base *BaseCallerSession) GetOwnerOfToken(tokenId *big.Int) (common.Address, error) {
	return _Base.Contract.GetOwnerOfToken(&_Base.CallOpts, tokenId)
}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseCaller) GetTokenBalance(opts *bind.CallOpts, account common.Address, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getTokenBalance", account, tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseSession) GetTokenBalance(account common.Address, tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.GetTokenBalance(&_Base.CallOpts, account, tokenId)
}

// GetTokenBalance is a free data retrieval call binding the contract method 0x0916bae5.
//
// Solidity: function getTokenBalance(address account, uint256 tokenId) view returns(uint256)
func (_Base *BaseCallerSession) GetTokenBalance(account common.Address, tokenId *big.Int) (*big.Int, error) {
	return _Base.Contract.GetTokenBalance(&_Base.CallOpts, account, tokenId)
}

// GetTokensCreatedBy is a free data retrieval call binding the contract method 0xddc0f312.
//
// Solidity: function getTokensCreatedBy(address owner) view returns(uint256[])
func (_Base *BaseCaller) GetTokensCreatedBy(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "getTokensCreatedBy", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTokensCreatedBy is a free data retrieval call binding the contract method 0xddc0f312.
//
// Solidity: function getTokensCreatedBy(address owner) view returns(uint256[])
func (_Base *BaseSession) GetTokensCreatedBy(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetTokensCreatedBy(&_Base.CallOpts, owner)
}

// GetTokensCreatedBy is a free data retrieval call binding the contract method 0xddc0f312.
//
// Solidity: function getTokensCreatedBy(address owner) view returns(uint256[])
func (_Base *BaseCallerSession) GetTokensCreatedBy(owner common.Address) ([]*big.Int, error) {
	return _Base.Contract.GetTokensCreatedBy(&_Base.CallOpts, owner)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Base *BaseCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Base.Contract.IsApprovedForAll(&_Base.CallOpts, account, operator)
}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseCaller) OriginalCreators(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "originalCreators", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseSession) OriginalCreators(arg0 *big.Int) (common.Address, error) {
	return _Base.Contract.OriginalCreators(&_Base.CallOpts, arg0)
}

// OriginalCreators is a free data retrieval call binding the contract method 0x8b305930.
//
// Solidity: function originalCreators(uint256 ) view returns(address)
func (_Base *BaseCallerSession) OriginalCreators(arg0 *big.Int) (common.Address, error) {
	return _Base.Contract.OriginalCreators(&_Base.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Base *BaseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Base.Contract.SupportsInterface(&_Base.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Base.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Base *BaseCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _Base.Contract.Uri(&_Base.CallOpts, arg0)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseTransactor) Mint(opts *bind.TransactOpts, tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "mint", tokenName, amount, ipfsPath, ticketPool, div, data)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseSession) Mint(tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, ipfsPath, ticketPool, div, data)
}

// Mint is a paid mutator transaction binding the contract method 0xfaf0cc36.
//
// Solidity: function mint(string tokenName, uint256 amount, string ipfsPath, uint256 ticketPool, uint256 div, bytes data) returns()
func (_Base *BaseTransactorSession) Mint(tokenName string, amount *big.Int, ipfsPath string, ticketPool *big.Int, div *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.Mint(&_Base.TransactOpts, tokenName, amount, ipfsPath, ticketPool, div, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Base *BaseTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeBatchTransferFrom(&_Base.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Base *BaseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Base.Contract.SafeTransferFrom(&_Base.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Base *BaseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Base.Contract.SetApprovalForAll(&_Base.TransactOpts, operator, approved)
}

// BaseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Base contract.
type BaseApprovalForAllIterator struct {
	Event *BaseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseApprovalForAll represents a ApprovalForAll event raised by the Base contract.
type BaseApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BaseApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BaseApprovalForAllIterator{contract: _Base.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BaseApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseApprovalForAll)
				if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Base *BaseFilterer) ParseApprovalForAll(log types.Log) (*BaseApprovalForAll, error) {
	event := new(BaseApprovalForAll)
	if err := _Base.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Base contract.
type BaseMintIterator struct {
	Event *BaseMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseMint represents a Mint event raised by the Base contract.
type BaseMint struct {
	From    common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) FilterMint(opts *bind.FilterOpts, from []common.Address) (*BaseMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return &BaseMintIterator{contract: _Base.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *BaseMint, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "Mint", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseMint)
				if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed from, uint256 tokenId)
func (_Base *BaseFilterer) ParseMint(log types.Log) (*BaseMint, error) {
	event := new(BaseMint)
	if err := _Base.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Base contract.
type BaseTransferBatchIterator struct {
	Event *BaseTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferBatch represents a TransferBatch event raised by the Base contract.
type BaseTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferBatchIterator{contract: _Base.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BaseTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferBatch)
				if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Base *BaseFilterer) ParseTransferBatch(log types.Log) (*BaseTransferBatch, error) {
	event := new(BaseTransferBatch)
	if err := _Base.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Base contract.
type BaseTransferSingleIterator struct {
	Event *BaseTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTransferSingle represents a TransferSingle event raised by the Base contract.
type BaseTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BaseTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BaseTransferSingleIterator{contract: _Base.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BaseTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTransferSingle)
				if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Base *BaseFilterer) ParseTransferSingle(log types.Log) (*BaseTransferSingle, error) {
	event := new(BaseTransferSingle)
	if err := _Base.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Base contract.
type BaseURIIterator struct {
	Event *BaseURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseURI represents a URI event raised by the Base contract.
type BaseURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BaseURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BaseURIIterator{contract: _Base.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BaseURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Base.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseURI)
				if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Base *BaseFilterer) ParseURI(log types.Log) (*BaseURI, error) {
	event := new(BaseURI)
	if err := _Base.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
