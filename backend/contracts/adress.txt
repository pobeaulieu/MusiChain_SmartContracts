package main

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"fmt"
	"log"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
)

func main() {
	// Generate a new private key
	privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	if err != nil {
		log.Fatal(err)
	}

	// Get the public key from the private key
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("error casting public key to ECDSA")
	}

	// Get the Ethereum address from the public key
	address := crypto.PubkeyToAddress(*publicKeyECDSA)
	publicKeyBytes := crypto.FromECDSAPub(publicKeyECDSA)

	fmt.Println("Private Key:", hexutil.Encode(crypto.FromECDSA(privateKey)))
	fmt.Println("Public Key:", hexutil.Encode(publicKeyBytes))
	fmt.Println("Address:", address.Hex())
}
